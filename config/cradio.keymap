// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

&lt { flavor = "balanced"; };

&mt { flavor = "balanced"; };

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        keeb_sys {
            if-layers = <3 3 5 4>;
            then-layer = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W       &kp E    &kp R          &kp T        &kp Y      &kp U      &kp I      &kp O       &kp P
&mt LCTRL A  &mt LGUI S  &lt 4 D  &lt 0 F        &kp G        &kp H      &lt 0 J    &lt 3 K    &mt RGUI L  &mt RCTRL SEMI
&kp Z        &kp X       &kp C    &kp V          &kp B        &kp N      &kp M      &kp COMMA  &kp DOT     &kp FSLH
                                  &kp BACKSPACE  &kp LSHFT    &kp RSHFT  &kp SPACE
            >;
        };

        mod_ext {
            bindings = <
&trans      &trans    &trans      &trans     &trans                  &trans  &trans  &trans  &trans  &trans
&caps_word  &kp TAB   &kp ESCAPE  &kp ENTER  &kp LS(LA(LC(LGUI)))    &trans  &trans  &trans  &trans  &trans
&sk LALT    &sk LGUI  &sk LCTRL   &sk LSHFT  &kp LG(LC(SPACE))       &trans  &trans  &trans  &trans  &trans
                                  &kp DEL    &trans                  &trans  &trans
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp N7   &kp N8  &kp N9  &kp GRAVE
&trans  &trans  &trans  &trans  &trans    &kp EQUAL  &kp N4   &kp N5  &kp N6  &kp BSLH
&trans  &trans  &trans  &trans  &trans    &kp N0     &kp N1   &kp N2  &kp N3  &kp SQT
                        &trans  &trans    &trans     &kp RET
            >;
        };

        symbols {
            bindings = <
&trans  &trans  &trans    &trans        &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LBKT  &kp LS(LBRC)  &kp LS(LPAR)    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp RBKT  &kp LS(RBRC)  &kp LS(RPAR)    &trans  &trans  &trans  &trans  &trans
                          &trans        &trans          &trans  &trans
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp N4     &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &trans    &trans         &trans     &trans     &trans
                        &trans  &trans    &trans    &trans
            >;
        };

        func {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        keeb_sys {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
