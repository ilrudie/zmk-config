// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        mtr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };

        ltl: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33>;
        };

        ltr: layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        go_assign: go_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GO_ASSIGN";
        };

        rust_return: rust_return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp LS(PERIOD)>;
            label = "RUST_RETURN";
        };

        rust_match: rust_match {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(PERIOD)>;
            label = "RUST_MATCH";
        };
    };

    combos {
        compatible = "zmk,combos";

        keeb_sys {
            bindings = <&to 6>;
            key-positions = <13 12 16 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q         &kp W        &kp E         &kp R         &kp T                      &kp Y                    &kp U         &kp I             &kp O        &kp P
  &mtl LCTRL A  &mtl LGUI S  &ltl 4 D      &ltl 2 F      &mtl LS(LA(LC(LGUI))) G    &mtr RS(RA(RC(RGUI))) H  &ltr 1 J      &ltr 3 K          &mtr RGUI L  &mtr RCTRL SEMICOLON
  &kp Z         &kp X        &mtl LSHFT C  &mtl LSHFT V  &kp B                      &kp N                    &mtr RSHFT M  &mtr RSHFT COMMA  &kp DOT      &kp FSLH
                                           &kp ESCAPE    &kp BACKSPACE              &kp SPACE                &kp TAB
            >;
        };

        mod_ext {
            bindings = <
  &trans      &trans    &trans      &trans     &to 5                   &trans  &trans  &trans  &trans  &trans
  &caps_word  &kp TAB   &kp ESCAPE  &kp ENTER  &kp LS(LA(LC(LGUI)))    &trans  &trans  &trans  &trans  &trans
  &sk LALT    &sk LGUI  &sk LCTRL   &sk LSHFT  &kp LG(LC(SPACE))       &trans  &trans  &trans  &trans  &trans
                                    &trans     &kp DELETE              &trans  &trans
            >;
        };

        num {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp N7      &kp N8  &kp N9  &kp BACKSLASH
  &trans  &trans  &trans  &trans  &trans    &kp EQUAL  &kp N4      &kp N5  &kp N6  &kp SINGLE_QUOTE
  &trans  &trans  &trans  &trans  &trans    &kp N0     &kp N1      &kp N2  &kp N3  &kp GRAVE
                          &trans  &trans    &kp ENTER  &kp PERIOD
            >;
        };

        symbols {
            bindings = <
  &trans  &rust_match        &rust_return           &go_assign  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &kp LEFT_BRACKET   &kp LS(LEFT_BRACKET)   &kp LS(N9)  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &kp RIGHT_BRACKET  &kp LS(RIGHT_BRACKET)  &kp LS(N0)  &trans    &trans  &trans  &trans  &trans  &trans
                                                    &trans      &trans    &trans  &trans
            >;
        };

        arrows {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp N4     &trans
  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &trans    &trans         &trans     &trans     &trans
                          &trans  &trans    &trans    &trans
            >;
        };

        func {
            bindings = <
  &kp F1  &kp F2  &kp F3   &kp F4   &kp F5     &trans  &kp C_BRIGHTNESS_INC  &kp C_BRI_DEC  &trans        &trans
  &kp F6  &kp F7  &kp F8   &kp F9   &kp F10    &trans  &kp C_PREV            &kp C_NEXT     &kp C_PP      &trans
  &trans  &trans  &kp F11  &kp F12  &trans     &trans  &kp C_MUTE            &kp C_VOL_DN   &kp C_VOL_UP  &trans
                           &to 0    &trans     &trans  &to 0
            >;
        };

        keeb_sys {
            bindings = <
  &sys_reset   &trans  &out OUT_TOG  &bt BT_CLR_ALL  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
  &bootloader  &trans  &trans        &trans          &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
  &trans       &trans  &trans        &bt BT_CLR      &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                                     &to 0           &trans          &trans  &to 0
            >;
        };
    };
};
